import ChatOtherMessage from "../components/OtherMessage.tsx";
import {
  defaultServerState,
  exproleServerState,
  setDefaultServerState,
} from "../utils/state.ts";
import { createEffect, createSignal } from "solid-js";
import { useAtom } from "solid-jotai";
import { Loading } from "../components/load.tsx";
import { Register as RegisterComponent } from "./Register.tsx";
import { Login as LoginComponent } from "./Login.tsx";
import { requester } from "../utils/requester.ts";
const sampleChatData = {
  roomName: "„Åü„Åì„Åü„Åì„ÉÅ„É£„ÉÉ„Éà",
  talkData: [
    { userName: "tako", messages: "„Åã„Çè„Çà„ÅÑÁµµ„Åå„Åª„Åó„ÅÑ„ÅÆ„Åâ" },
    { userName: "„ÇÑ„Åª„Åª„Éº„ÅÑ", messages: "„Åì„ÅìÈÄÅ„Å£„Å¶„ÅÑ„ÅÑ„Åã„Å™" },
    { userName: "tako", messages: "Ëëó‰ΩúÊ®©„Éë„ÉØ„Éº„Åå„ÅÇ„Çã„Åã„Çâ„Å™„ÅÅ" },
    { userName: "tako", messages: "„Çµ„Ç§„Éà„ÅÆ„Å©Áúü„Çì‰∏≠„Å´ÁΩÆ„Åç„Åü„ÅÑ" },
    { userName: "„Å™„Çì", messages: "„Éá„Ç∂„Ç§„É≥ËÄÉ„Åà„Å¶„ÄÅ„Åù„Çå„ÇíÂÖÉ„Å´Â§ñÊ≥®" },
    { userName: "tako", messages: "„Åù„Çå„Åå‰∏ÄÁï™„Å†„Åë„Å©„Åà„Åê„ÅÑÈáë„Åã„Åã„Çä„Åù„ÅÜ" },
    { userName: "tako", messages: "1‰∏á„Åê„Çâ„ÅÑ" },
    { userName: "tako", messages: "„ÇÇ„Å£„Å®„Åã„Å™" },
    {
      userName: "„Å™„Çì",
      messages: "„ÇÇ„Åó„Åè„ÅØÁµµ„Åå‰∏äÊâã„ÅÑ‰∫∫„ÅåÁü•„ÇäÂêà„ÅÑ„Å´„ÅÑ„Çå„Å∞„Åù„ÅÆ‰∫∫„Å´È†º„ÇÄ",
    },
    { userName: "„Å™„Çì", messages: "1„Äú4„Éû„ÇΩ„ÅåÁõ∏Â†¥„Çâ„Åó„ÅÑ" },
    { userName: "tako", messages: "novelAI„Åß„Åó„Å∂„Çã„Åã" },
    { userName: "tako", messages: "„Åù„Çå„Å†„Åë„ÅÇ„Å£„Åü„Çâ„É¢„Éã„Çø„ÉºË≤∑„ÅÜ„Çà" },
    { userName: "„Å™„Çì", messages: "„Åæ„ÅÇ„ÄÅ„Éç„ÉÉ„Éà„Åß„ÅÜ„Åæ„ÅèÈñ¢‰øÇ‰Ωú„Çã„Åó„Åã„Å™„ÅÑ„Çè„Å™" },
    { userName: "„Å™„Çì", messages: "AI„Å†„Å£„Å¶Ëëó‰ΩúÊ®©ÂïèÈ°å„Åæ„Å†„Åæ„Å†„ÅÇ„Çã„Å†„Çç„ÅÜ„Åó" },
    { userName: "tako", messages: "‰ªä„ÅÆ„Å®„Åì„Çç„Éï„É™„Éº„Å†„Åã„Çâ" },
    { userName: "tako", messages: "Âç±„Å™„Åè„Å™„Å£„Åü„Çâ„Åô„ÇäÊõø„Åà„Çã" },
    { userName: "tako", messages: "„Åæ„Å†„Ç≥„Ç§„É≥ÁöÑ„Å™„ÇÑ„Å§ÊÆã„Å£„Å¶„Åü„Åã„Å™" },
    { userName: "tako", messages: "SSR„ÅÆchartjs„ÅÑ„ÅÑ„Å≠" },
    { userName: "tako", img: "./strict/1.jpg" },
    { userName: "371tti", messages: "„Åä" },
    { userName: "371tti", messages: "„Å§„ÅÑ„Å´chart.js„Åã" },
    { userName: "371tti", img: "./strict/2.jpg" },
    { userName: "371tti", messages: "Ê≠£Ë¶èË°®ÁèæüòÄ" },
    { userName: "tako", messages: "Âè≥ÂçäÂàÜ„ÅØÊò®Êó•„ÅÆ„Éô„Çπ„Éà‰ºöË©±ÁöÑ„Å™„ÅÆÊµÅ„Åô„Åã" },
    { userName: "tako", messages: "„ÇÇ„Å°„Çç„ÇìÂØ©Êüª„ÅÇ„Çä" },
    { userName: "tako", messages: "„Åç„Å£„Åó„Çá„ÅÑ‰ºöË©±„ÇíÊµÅ„Åô„Çè„Åë„Å´„ÅØ„ÅÑ„Åã„Çì" },
    { userName: "tako", messages: "ÂÖ¨Èñã„ÉÅ„É£„ÉÉ„ÉàÁöÑ„Å™„ÇÑ„Å§„Å†„Åë„Å©„Å≠" },
    {
      userName: "371tti",
      messages: "hello 000 im this OC bot! Nicetomeet you",
    },
    { userName: "371tti", messages: "„Çª„Ç≠„É•„É™„ÉÜ„Ç£„ÇÄ„Åö„Åô„Åé" },
  ],
};

export function Register() {
  createEffect(() => {
  });
  const [defaultServer, setDefaultServer] = useAtom(defaultServerState);
  const [exproleServer, setExproleServer] = useAtom(exproleServerState);
  const [SetedDefaultServer] = useAtom(setDefaultServerState);
  return (
    <>
      {SetedDefaultServer() && <SelectedServer />}
    </>
  );
}

function SelectedServer() {
  return (
    <>
      <>
        <div class="flex w-full h-screen mb-6">
          <div class="lg:w-2/3 w-full m-5 lg:m-0">
            <div class="bg-white text-black rounded-lg shadow-[0_12px_32px_#00000040] p-6 max-w-[472px] lg:ml-[100px] mt-[80px] mx-auto">
              <div class="flex mb-3">
                <div class="w-full">
                  <div class="flex items-center mb-4">
                    <img
                      src="/api/v2/server/icon"
                      alt="logo"
                      class="w-20 h-20 rounded-lg shadow-md"
                    />
                    <h1 class="text-3xl font-bold ml-4">
                      takos
                    </h1>
                  </div>
                  <div class="text-base text-gray-700 mb-6">
                    explain
                  </div>
                </div>
              </div>
              <RegisterComponent />
              <LoginComponent />
              <button
                onClick={() => {
                  alert("„Åæ„Å†ÂÆüË£Ö„Åó„Å¶„Å™„ÅÑÔºÅÔºÅÔºÅ");
                }}
                class="bg-[#192320] text-white rounded-3xl py-2 px-4 hover:bg-[#192320] border w-full lg:mt-2 mt-3"
              >
                ‰ªñ„ÅÆ„Çµ„Éº„Éê„Éº„ÇíÊé¢„Åô
              </button>
              <div class="flex w-full space-x-4 mt-3">
                <div class="w-1/2 bg-gray-200 text-center py-4 rounded-lg shadow-inner">
                  <p class="text-sm text-gray-700">„É¶„Éº„Ç∂„Éº</p>
                  <p class="text-xl font-semibold">{"2(‰ªÆ)"}</p>
                </div>
                <div class="w-1/2 bg-gray-200 text-center py-4 rounded-lg shadow-inner">
                  <p class="text-sm text-gray-700">
                    Êé•Á∂ö„Çµ„Éº„Éê„Éº
                  </p>
                  <p class="text-xl font-semibold">{"2(‰ªÆ)"}</p>
                </div>
              </div>
              <div class="w-full bg-gray-200 text-center py-4 rounded-lg shadow-inner mt-3">
                <p class="text-sm text-gray-700">version</p>
                <p class="text-lg font-semibold">
                  {"takos v" + "0.2 beta"}
                </p>
              </div>
            </div>
            <div class="mt-4">
              <div class="bg-white text-black rounded-lg shadow-[0_12px_32px_#00000040] p-6 max-w-[472px] lg:ml-[100px] lg:mt-[20px] mx-auto">
                <img src="/api/v2/client/chart" class="w-full" alt="list" />
              </div>
            </div>
            <div class="mt-4">
              <div class="bg-white text-black rounded-lg shadow-[0_12px_32px_#00000040] p-6 max-w-[472px] lg:ml-[100px] lg:mt-[20px] mx-auto">
                <div class="text-center">
                  <p class="text-sm text-gray-700">
                    ¬© 2024 Tomiyama Shota.
                  </p>
                  <p class="text-base text-gray-600">
                    Operat By takoserver
                  </p>

                  <p class="text-sm text-gray-700">
                    This site is protected by reCAPTCHA and the Google
                    <a href="https://policies.google.com/privacy">
                      Privacy Policy
                    </a>{" "}
                    and
                    <a href="https://policies.google.com/terms">
                      Terms of Service
                    </a>{" "}
                    apply.
                  </p>
                  <div class="flex justify-between w-5/6 mx-auto">
                    <p>
                      <a href="https://www.takos.jp/privacypolicy">
                        „Éó„É©„Ç§„Éê„Ç∑„Éº„Éù„É™„Ç∑„Éº
                      </a>
                    </p>
                    <p class="ml-4">
                      <a href="https://www.takos.jp/terms">
                        Âà©Áî®Ë¶èÁ¥Ñ
                      </a>
                    </p>
                    <p class="ml-4">
                      <a href="https://x.com/takoserver_com">
                        SNS
                      </a>
                    </p>
                    <p class="ml-4">
                      <a href="https://line.me/ti/g2/Q0c8YJlkh5f_hkDuODxp39XF9A7BOCFqezaAHA?utm_source=invitation&utm_medium=link_copy&utm_campaign=default">
                        „Ç≥„Éü„É•„Éã„ÉÜ„Ç£„Éº
                      </a>
                    </p>
                  </div>
                </div>
              </div>
            </div>
            <div class="h-20"></div>
          </div>
          <div class="lg:w-[590px] hidden lg:block top-0 bottom-0 right-0 fixed">
            <div class="w-5/6 m-auto h-full overflow-hidden mx-auto">
              <div class="scroll-animation talkList">
                {sampleChatData.talkData.map((data) => {
                  let iconPath = "";
                  switch (data.userName) {
                    case "tako":
                      iconPath = "/static/tako.jpeg";
                      break;
                    case "371tti":
                      iconPath = "/static/371tti.jpg";
                      break;
                    case "„Å™„Çì":
                      iconPath = "/static/„Å™„Çì.jpeg";
                      break;
                    default:
                      iconPath = "/people.jpeg";
                      break;
                  }
                  if (data.img) {
                    return; //
                  }
                  if (data.messages) {
                    return (
                      <ChatOtherMessage
                        message={() => {
                          return [
                            [
                              "a",
                              {
                                verified: false,
                                encrypted: false,
                                content: data.messages,
                                type: "text",
                                timestamp: Date.now().toString(),
                              },
                            ],
                          ];
                        }}
                        messageid={"a"}
                        name={data.userName}
                        time={Date.now().toString()}
                        isPrimary={true}
                        isFetch={true}
                      />
                    );
                  }
                })}
              </div>
            </div>
          </div>
        </div>
        <div class="bottom-5 fixed w-full hidden lg:block">
          <div class="w-[800px] py-[8px] mx-auto rounded-xl bg-[rgba(25,35,32,0.5)] flex overflow-hidden">
            <p class="text-white mx-auto">
              „Åì„Åì„Å´Êé•Á∂öÊ∏à„Åø„Çµ„Éº„Éê„Éº„ÅåË°®Á§∫„Åï„Çå„Åà„Çã‰∫àÂÆö„Åß„Åô
            </p>
          </div>
        </div>
      </>
    </>
  );
}
